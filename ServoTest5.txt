/* 
 ********************************************
 * Programme rotation Servo + liaison série
 * Lorsqu'on appuie sur F, on ferme la porte
 ********************************************
 * LIAISON SÉRIE :
 * Baud Rate = 600
 ********************************************
 */

#include <p18f4550.h>
#include <stdio.h>
#include <math.h>
#include <xc.h>

#pragma config FOSC = HS 		// oscillator HS
#pragma config PWRT = OFF
#pragma config BOR = OFF
#pragma config WDT = OFF 		// Disable watchDog
#pragma config LVP = OFF 		// Disable low voltage programmig
#pragma config DEBUG = OFF		// Debug ON
#pragma config MCLRE=OFF

#define BOUTON RC0
#define LED RC1
#define SERVO RC2

/*******************************************/
/* Définition des positions du servomoteur */
/*******************************************/
/* 5  =  3% de 156 avec 156 la periode     */
/* 11 =  7% de 156 avec 156 la periode     */
/* 19 = 12% de 156 avec 156 la periode     */
/*******************************************/
#define GAUCHE   5 /*  3% of duty cycle */
#define HAUT    11 /*  7% of duty cycle */
#define DROITE  19 /* 12% of duty cycle */

#define RX RC7
#define TX RC6

/**********************/
/* Initialisation PWM */
/**********************/
void PWM_Init()
{
    TRISCbits.TRISC2 = 0;  /* Pin CCP1 en Output pour le PWM */
    TRISCbits.TRISC0 = 1;  /* Bouton en Input pin RC0 */
    TRISCbits.TRISC1 = 0;  /* Led en OUTPUT pin RC1 */
    
    /* On configure le registre pour avoir un PWM */
    /* 0x0C = 0000 1100 (Voir rapport pour le detail) */
    CCP1CON = 0x0C;
      
    /* On configure le registre pour marcher en 500kHz d'horloge interne */
    /* 0x32 = 0011 0010 (Voir rapport pour le detail) */
    OSCCON=0x32;         
    
    /* Periode correspondant à 50Hz (voir Rapport pour le detail) */ 
    PR2=156;             
    
    /* On initialise le Duty Cycle */
    CCPR1L=1;
    
    /* On configure le registre T2CON pour avoir un Prescaler :16 */
    /* et le Timer 2 en ON */
    /* 0x06 = 0000 0110 (Voir rapport pour le detail) */
    T2CON=0x06;
    
    /* On ititialise le Timer 2 à 0 */
    TMR2 = 0;
    
    ADCON1=0x0F;
    CMCON=0x07;
}


void uartInit() {
    TRISCbits.TRISC6=1;
    TRISCbits.TRISC7=1;
   
    TXSTAbits.TX9=0;
    TXSTAbits.TXEN=1;
    TXSTAbits.SYNC=0;
    TXSTAbits.BRGH=0;
    
    RCSTAbits.SPEN=1;
    RCSTAbits.CREN=1;
    
    SPBRG=12;   // baudrate=Fosc/(64*(SPBRG+1)) (Fosc=500 KHz)
}

char uartRead() {
    if(PIR1bits.RCIF!=0) return RCREG;
    return 0;
}

int uartAvailable() {
    if(PIR1bits.RCIF!=0) return 1;
    return 0;
}

int uartWrite(char c) {
    if(PIR1bits.TXIF!=0) {
        TXREG=c;
        return 1;
    }
    return 0;
}

void SetDutyCycleTo(int Duty_cycle)
{
    CCPR1L = Duty_cycle;
}


void delay(unsigned int val)
{
     unsigned int i,j;
        for(i=0;i<val;i++)
            for(j=0;j<10;j++);
}

void fermerPorte(){
    LED = 1; /* On allume la LED */
    SetDutyCycleTo(HAUT); /* On ouvre la porte */
    delay(5000); /* On attend 5 sec */
    LED = 0; /* On éteint la led */
}

int main() 
{
    BOUTON = 0; /* Bouton en Input pin RC0 */
    LED = 0; /* Led en OUTPUT pin RC1   */
    char c;
    uartInit();
    PWM_Init(); /* Initialize PWM */
    while(1)
    { 
        SetDutyCycleTo(DROITE);
        
        
        if(uartAvailable()!=0) {
            c=uartRead();
            
            // On ouvre
            if (c == 'F')
            {
                uartWrite('Z');
                fermerPorte();
            }
            else {uartWrite('O');}
        }
        
        //SetDutyCycleTo(DROITE);
           
        // Si on appuie sur le bouton   
        //if(BOUTON == 1){
        //   fermerPorte();
        //}
    }
}


